import { NextApiRequest, NextApiResponse } from 'next'
import prisma from '@/lib/prisma'
import { calculateWeightedScore } from '@/lib/calculateScore'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method === 'POST') {
    try {
      const {
        vendorId,
        evaluatorId,
        domain,
        ...evaluationData
      } = req.body

      // Calculate overall score using the shared utility function
      const overallScore = calculateWeightedScore(evaluationData)

      const evaluation = await prisma.evaluation.create({
        data: {
          ...evaluationData,
          vendorId,
          evaluatorId,
          domain,
          overallScore,
        },
      })

      // Update vendor's average score
      const allEvaluations = await prisma.evaluation.findMany({
        where: {
          vendorId: vendorId,
        },
        select: {
          overallScore: true,
        },
      })

      const averageScore = allEvaluations.reduce((acc, curr) => acc + curr.overallScore, 0) / allEvaluations.length

      await prisma.vendor.update({
        where: {
          id: vendorId,
        },
        data: {
          averageScore: averageScore,
        },
      })

      return res.status(200).json(evaluation)
    } catch (error) {
      console.error('Error creating evaluation:', error)
      return res.status(500).json({ error: 'Failed to create evaluation' })
    }
  }

  if (req.method === 'GET') {
    try {
      const { vendorId } = req.query
      
      if (!vendorId) {
        return res.status(400).json({ error: 'Vendor ID is required' })
      }

      const evaluations = await prisma.evaluation.findMany({
        where: {
          vendorId: parseInt(vendorId as string),
        },
        orderBy: {
          createdAt: 'desc',
        },
      })

      return res.status(200).json(evaluations)
    } catch (error) {
      console.error('Error fetching evaluations:', error)
      return res.status(500).json({ error: 'Failed to fetch evaluations' })
    }
  }

  return res.status(405).json({ error: 'Method not allowed' })
}